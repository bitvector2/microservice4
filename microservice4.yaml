apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: microservice4
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /posts
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - path: /posts
        backend:
          serviceName: microservice4
          servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: microservice4
  namespace: default
  labels:
    app: microservice4
spec:
  ports:
  - name: service-port
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: microservice4
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice4
  namespace: default
  labels:
    app: microservice4
spec:
  replicas: 2
  selector:
    matchLabels:
      app: microservice4
  template:
    metadata:
      labels:
        app: microservice4
    spec:
      containers:
      - name: microservice4
        image: bitvector/microservice4:0.0.11
        imagePullPolicy: Always
        command: ["java"]
        args: ["-XX:+UseG1GC", "-XX:+UseStringDeduplication", "-XX:MaxRAMPercentage=75", "-jar", "app.jar"]
        resources:
          limits:
            memory: "1024M"
        env:
        - name: SPRING_APPLICATION_JSON
          value: '{"post_service_url": "http://jsonplaceholder.typicode.com/posts"}'
        ports:
        - containerPort: 8080
          name: service-port
          protocol: TCP
      - name: redis
        image: redis:alpine
        imagePullPolicy: Always
        command: ["redis-server"]
        args: ["--maxmemory", "1000M"]
        resources:
          limits:
            memory: "1024M"
        ports:
        - containerPort: 6379
          name: service-port
          protocol: TCP
